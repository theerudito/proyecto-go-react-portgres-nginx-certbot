services:
  # --- BACKEND (Go) ---
  backend:
    build: ./backend
    container_name: jl_backend
    env_file:
      - ./backend/.env
    ports:
      - "1000:1000"
    depends_on:
      - db
    networks:
      - app-network

  # --- FRONTEND (React/Vite) ---
  frontend:
    build: ./frontend
    container_name: jl_frontend
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    networks:
      - app-network
    ports:
      - "3000:80"

  # --- DATABASE (PostgreSQL) ---
  db:
    image: postgres:15
    container_name: jl_postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1020
      POSTGRES_DB: naruto
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./backend/ddl.sql:/docker-entrypoint-initdb.d/ddl.sql
    ports:
      - "5432:5432"
    networks:
      - app-network

  # --- CERTBOT (SSL) ---
  certbot:
    image: certbot/certbot
    container_name: certbot_jl
    volumes:
      - ./certbot/conf:/etc/letsencrypt # Volumen persistente para los certificados
      - ./certbot/www:/var/www/certbot # Volumen de validación de Certbot
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot --email erudito.dev@gmail.com --agree-tos --no-eff-email -d docker.between-bytes.tech"
    networks:
      - app-network

  # --- NGINX Reverse Proxy (SSL) ---
  nginx:
    image: nginx:alpine
    container_name: jl_nginx
    depends_on:
      - frontend
      - backend
      - certbot # Nginx debe esperar a que Certbot haya generado los certificados
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d # Volumen para la configuración de Nginx
      - ./certbot/conf:/etc/letsencrypt # Volumen para los certificados generados por Certbot
      - ./certbot/www:/var/www/certbot # Volumen para las validaciones de ACME
    ports:
      - "8081:80" # HTTP
      - "4455:443" # HTTPS
    networks:
      - app-network
    command: [ "/bin/sh", "-c", "/start-nginx.sh" ]

networks:
  app-network:


volumes:
  pg_data:
